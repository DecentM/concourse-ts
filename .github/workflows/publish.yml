name: npm-publish

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  determine-matrix:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    outputs:
      affected: ${{ steps.affected.outputs.projects }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: lock-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            lock-

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          set -exu
          yarn --frozen-lockfile --non-interactive

      - uses: nrwl/nx-set-shas@v3

      - name: Determine affected packages
        id: affected
        run: |
          set -exu
          echo projects=$(yarn --silent nx print-affected | jq -c '.projects') >> $GITHUB_OUTPUT

  tests:
    name: test-${{ matrix.project }}

    runs-on: ubuntu-latest

    needs:
      - determine-matrix

    if: ${{ needs.determine-matrix.outputs.affected != '[]' }}

    strategy:
      matrix:
        project: ${{ fromJson(needs.determine-matrix.outputs.affected) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: |
            node_modules
            packages/${{ matrix.project }}/node_modules
          key: lock-${{ matrix.project }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            lock-

      - name: Restore NX compute cache
        id: cache-nx-restore
        uses: actions/cache/restore@v3
        with:
          path: .nx-cache
          key: nx-cache

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          set -exu
          yarn --frozen-lockfile --non-interactive

      - uses: nrwl/nx-set-shas@v3

      - run: yarn nx run ${{ matrix.project }}:lint

      - run: yarn nx run ${{ matrix.project }}:test

      - name: Upload coverage result
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ matrix.project }}
          path: packages/${{ matrix.project }}/coverage

      - name: Delete NX compute cache
        run: |
          set -exu
          curl \
            -X DELETE \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/DecentM/concourse-ts/actions/caches?key=nx-cache

      - name: Save NX compute cache
        id: cache-nx-save
        uses: actions/cache/save@v3
        with:
          path: .nx-cache
          key: nx-cache

  coverage-report-submission:
    runs-on: ubuntu-latest

    needs:
      - tests
      - determine-matrix

    steps:
      - uses: actions/download-artifact@v3
        with:
          path: .

      - name: Create coverage reports list
        id: reports
        run: |
          set -exu

          list=$(echo ${{ toJson(needs.determine-matrix.outputs.affected) }} | jq -c 'map("coverage-report-" + . + "/lcov.info")')
          echo list="$list" >> $GITHUB_OUTPUT

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ${{ join(fromJson(steps.reports.outputs.list), ',') }}

  build:
    name: build-${{ matrix.project }}

    if: ${{ needs.determine-matrix.outputs.affected != '[]' }}

    needs:
      - determine-matrix

    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: ${{ fromJson(needs.determine-matrix.outputs.affected) }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: |
            node_modules
            packages/${{ matrix.project }}/node_modules
          key: lock-${{ matrix.project }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            lock-

      - name: Restore NX compute cache
        id: cache-nx-restore
        uses: actions/cache/restore@v3
        with:
          path: .nx-cache
          key: nx-cache

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          set -exu
          yarn --frozen-lockfile --non-interactive

      - name: Build ${{ matrix.project }}
        run: yarn nx run ${{ matrix.project }}:build

      - name: Upload build result
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.project }}
          path: dist/packages/${{ matrix.project }}

      - name: Delete NX compute cache
        run: |
          set -exu
          curl \
            -X DELETE \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/DecentM/concourse-ts/actions/caches?key=nx-cache

      - name: Save NX compute cache
        id: cache-nx-save
        uses: actions/cache/save@v3
        with:
          path: .nx-cache
          key: nx-cache

  publish:
    name: publish-${{ matrix.project }}

    needs:
      - tests
      - build
      - determine-matrix

    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: ${{ fromJson(needs.determine-matrix.outputs.affected) }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist-${{ matrix.project }}
          path: dist

      - name: Compare npm with local (versions)
        id: check
        uses: EndBug/version-check@v2
        with:
          file-url: https://unpkg.com/@decentm/${{ matrix.project }}@latest/package.json
          static-checking: localIsNew
          file-name: ./dist/package.json

      - name: Setup Node
        if: steps.check.outputs.changed == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'

      # Publish new versions of affected packages
      - name: Publish to NPM
        if: steps.check.outputs.changed == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -exu

          cd dist
          yarn publish . --access public
          cd -
